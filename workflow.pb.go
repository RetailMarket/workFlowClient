// Code generated by protoc-gen-go.
// source: workflow.proto
// DO NOT EDIT!

/*
Package workFlowClient is a generated protocol buffer package.

It is generated from these files:
	workflow.proto

It has these top-level messages:
	Product
	ProductsRequest
	ProductsResponse
	GetProductsRequest
	GetProductsResponse
*/
package workFlowClient

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Product struct {
	ProductId int32  `protobuf:"varint,1,opt,name=product_id,json=productId" json:"product_id,omitempty"`
	Version   string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *Product) Reset()                    { *m = Product{} }
func (m *Product) String() string            { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()               {}
func (*Product) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Product) GetProductId() int32 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *Product) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type ProductsRequest struct {
	Products []*Product `protobuf:"bytes,1,rep,name=products" json:"products,omitempty"`
}

func (m *ProductsRequest) Reset()                    { *m = ProductsRequest{} }
func (m *ProductsRequest) String() string            { return proto.CompactTextString(m) }
func (*ProductsRequest) ProtoMessage()               {}
func (*ProductsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ProductsRequest) GetProducts() []*Product {
	if m != nil {
		return m.Products
	}
	return nil
}

type ProductsResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *ProductsResponse) Reset()                    { *m = ProductsResponse{} }
func (m *ProductsResponse) String() string            { return proto.CompactTextString(m) }
func (*ProductsResponse) ProtoMessage()               {}
func (*ProductsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ProductsResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetProductsRequest struct {
}

func (m *GetProductsRequest) Reset()                    { *m = GetProductsRequest{} }
func (m *GetProductsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetProductsRequest) ProtoMessage()               {}
func (*GetProductsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type GetProductsResponse struct {
	Products []*Product `protobuf:"bytes,1,rep,name=products" json:"products,omitempty"`
}

func (m *GetProductsResponse) Reset()                    { *m = GetProductsResponse{} }
func (m *GetProductsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetProductsResponse) ProtoMessage()               {}
func (*GetProductsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetProductsResponse) GetProducts() []*Product {
	if m != nil {
		return m.Products
	}
	return nil
}

func init() {
	proto.RegisterType((*Product)(nil), "workFlowClient.Product")
	proto.RegisterType((*ProductsRequest)(nil), "workFlowClient.ProductsRequest")
	proto.RegisterType((*ProductsResponse)(nil), "workFlowClient.ProductsResponse")
	proto.RegisterType((*GetProductsRequest)(nil), "workFlowClient.GetProductsRequest")
	proto.RegisterType((*GetProductsResponse)(nil), "workFlowClient.GetProductsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for WorkFlow service

type WorkFlowClient interface {
	SaveUpdatePriceForApproval(ctx context.Context, in *ProductsRequest, opts ...grpc.CallOption) (*ProductsResponse, error)
	UpdateStatusToCompleted(ctx context.Context, in *ProductsRequest, opts ...grpc.CallOption) (*ProductsResponse, error)
	GetRecordsPendingForApproval(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (*GetProductsResponse, error)
}

type workFlowClient struct {
	cc *grpc.ClientConn
}

func NewWorkFlowClient(cc *grpc.ClientConn) WorkFlowClient {
	return &workFlowClient{cc}
}

func (c *workFlowClient) SaveUpdatePriceForApproval(ctx context.Context, in *ProductsRequest, opts ...grpc.CallOption) (*ProductsResponse, error) {
	out := new(ProductsResponse)
	err := grpc.Invoke(ctx, "/workFlowClient.WorkFlow/SaveUpdatePriceForApproval", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workFlowClient) UpdateStatusToCompleted(ctx context.Context, in *ProductsRequest, opts ...grpc.CallOption) (*ProductsResponse, error) {
	out := new(ProductsResponse)
	err := grpc.Invoke(ctx, "/workFlowClient.WorkFlow/UpdateStatusToCompleted", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workFlowClient) GetRecordsPendingForApproval(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (*GetProductsResponse, error) {
	out := new(GetProductsResponse)
	err := grpc.Invoke(ctx, "/workFlowClient.WorkFlow/GetRecordsPendingForApproval", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WorkFlow service

type WorkFlowServer interface {
	SaveUpdatePriceForApproval(context.Context, *ProductsRequest) (*ProductsResponse, error)
	UpdateStatusToCompleted(context.Context, *ProductsRequest) (*ProductsResponse, error)
	GetRecordsPendingForApproval(context.Context, *GetProductsRequest) (*GetProductsResponse, error)
}

func RegisterWorkFlowServer(s *grpc.Server, srv WorkFlowServer) {
	s.RegisterService(&_WorkFlow_serviceDesc, srv)
}

func _WorkFlow_SaveUpdatePriceForApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkFlowServer).SaveUpdatePriceForApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workFlowClient.WorkFlow/SaveUpdatePriceForApproval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkFlowServer).SaveUpdatePriceForApproval(ctx, req.(*ProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkFlow_UpdateStatusToCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkFlowServer).UpdateStatusToCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workFlowClient.WorkFlow/UpdateStatusToCompleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkFlowServer).UpdateStatusToCompleted(ctx, req.(*ProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkFlow_GetRecordsPendingForApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkFlowServer).GetRecordsPendingForApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workFlowClient.WorkFlow/GetRecordsPendingForApproval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkFlowServer).GetRecordsPendingForApproval(ctx, req.(*GetProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkFlow_serviceDesc = grpc.ServiceDesc{
	ServiceName: "workFlowClient.WorkFlow",
	HandlerType: (*WorkFlowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveUpdatePriceForApproval",
			Handler:    _WorkFlow_SaveUpdatePriceForApproval_Handler,
		},
		{
			MethodName: "UpdateStatusToCompleted",
			Handler:    _WorkFlow_UpdateStatusToCompleted_Handler,
		},
		{
			MethodName: "GetRecordsPendingForApproval",
			Handler:    _WorkFlow_GetRecordsPendingForApproval_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workflow.proto",
}

func init() { proto.RegisterFile("workflow.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x92, 0x41, 0x4b, 0x03, 0x31,
	0x10, 0x85, 0xdd, 0x8a, 0xb6, 0x1d, 0x41, 0x25, 0x0a, 0x5d, 0x8a, 0xe2, 0x12, 0x2f, 0x3d, 0x48,
	0x0f, 0xed, 0x2f, 0xd0, 0x42, 0x8b, 0x9e, 0x4a, 0xaa, 0x78, 0x53, 0x62, 0x33, 0x96, 0xe0, 0x76,
	0x27, 0x26, 0x69, 0xf7, 0xaf, 0xf9, 0xf3, 0xc4, 0xdd, 0xac, 0xda, 0x4a, 0x3d, 0x88, 0xb7, 0xbc,
	0xe1, 0xcd, 0xf7, 0x5e, 0x42, 0x60, 0x3f, 0x27, 0xfb, 0xf2, 0x9c, 0x52, 0xde, 0x35, 0x96, 0x3c,
	0xb1, 0x42, 0x0f, 0x53, 0xca, 0x07, 0xa9, 0xc6, 0xcc, 0xf3, 0x2b, 0xa8, 0x8f, 0x2d, 0xa9, 0xc5,
	0xd4, 0xb3, 0x53, 0x00, 0x53, 0x1e, 0x1f, 0xb5, 0x8a, 0xa3, 0x24, 0xea, 0xec, 0x88, 0x66, 0x98,
	0x5c, 0x2b, 0x16, 0x43, 0x7d, 0x89, 0xd6, 0x69, 0xca, 0xe2, 0x5a, 0x12, 0x75, 0x9a, 0xa2, 0x92,
	0x7c, 0x08, 0x07, 0x81, 0xe1, 0x04, 0xbe, 0x2e, 0xd0, 0x79, 0xd6, 0x87, 0x46, 0xd8, 0x74, 0x71,
	0x94, 0x6c, 0x77, 0xf6, 0x7a, 0xad, 0xee, 0x6a, 0x72, 0x37, 0xac, 0x88, 0x4f, 0x23, 0xbf, 0x80,
	0xc3, 0x2f, 0x8e, 0x33, 0x94, 0x39, 0xfc, 0x48, 0x9d, 0xa3, 0x73, 0x72, 0x86, 0x45, 0xa3, 0xa6,
	0xa8, 0x24, 0x3f, 0x06, 0x36, 0x42, 0xbf, 0x16, 0xcc, 0x6f, 0xe0, 0x68, 0x65, 0x1a, 0x30, 0x7f,
	0xe9, 0xd3, 0x7b, 0xab, 0x41, 0xe3, 0x3e, 0x98, 0x98, 0x84, 0xf6, 0x44, 0x2e, 0xf1, 0xce, 0x28,
	0xe9, 0x71, 0x6c, 0xf5, 0x14, 0x87, 0x64, 0x2f, 0x8d, 0xb1, 0xb4, 0x94, 0x29, 0x3b, 0xdb, 0x40,
	0xab, 0x7a, 0xb5, 0x93, 0xcd, 0x86, 0xb2, 0x22, 0xdf, 0x62, 0x0f, 0xd0, 0x2a, 0xf1, 0x13, 0x2f,
	0xfd, 0xc2, 0xdd, 0xd2, 0x80, 0xe6, 0x26, 0x45, 0x8f, 0xea, 0x7f, 0xf8, 0x1a, 0x4e, 0x46, 0xe8,
	0x05, 0x4e, 0xc9, 0x2a, 0x37, 0xc6, 0x4c, 0xe9, 0x6c, 0xf6, 0xfd, 0x12, 0x7c, 0x9d, 0xf1, 0xf3,
	0x7d, 0xdb, 0xe7, 0xbf, 0x7a, 0xaa, 0xa8, 0xa7, 0xdd, 0xe2, 0xb7, 0xf5, 0xdf, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x56, 0x2e, 0xd1, 0x63, 0x7f, 0x02, 0x00, 0x00,
}
